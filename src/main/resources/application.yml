##chanes added for the 08122013
server:
#  servlet:
#    context-path: /order-service
  port: 8081

management:
  endpoints:
    web:
      exposure:
        include:  true
        exclude: threaddump
  tracing:
    sampling:
      probability: 1.0 # only for testing purpose, switch back to 0.1 for production code
  zipkin:
    tracing:
      endpoint: http://192.168.0.102:9411/api/v2/spans


spring:
  application:
    name: order-service
  datasource:
    url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/microservices
    username: ${MYSQL_USER:root}
    password: ${MYSQL_PASSWORD:root}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
#  kafka:
#    bootstrap-servers:
#      - http://192.168.0.102:9092
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer;
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer;
#----------------below logging will activate the jpa transactional log

eureka:
  instance:
#    # Necessary for Docker as it doesn't have DNS entries
#    prefer-ip-address: true
#    # Necessary for Docker otherwise you will get 172.0.0.x IP
#    ip-address: 192.168.0.101
#    #"${HOST}"
  client:
    serviceUrl:
      # Location of your eureka server
      defaultZone: http://serviceregistory:8761/eureka

# Zipkin configuration


#Resilieance4j
resilience4j.circuitbreaker:
  instances:
    orderservice:
      registerHealthIndicator: true
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 10
      failureRateThreshold: 50
      waitDurationInOpenState: 5s
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true

logging:
  pattern:
    level: '%5p [${spring.application.name}, %X{traceId}, %X{spanId}]'
  charset:
    file: /opt/tomcat/logs/Orderservice.log
  level:
    org.springframework.orm.jpa: DEBUG
    org.springframework.transaction: DEBUG

